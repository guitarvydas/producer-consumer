* status
  using producer-consumer development
  debugging stacks
* intro
  Simple producer-consumer pipeline built in V0 of state language.
* build
#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*~")
 (ql:quickload :producer-consumer/generate-intermediate)
#+end_src

#+name: dsl
#+begin_src lisp :results output
  #| generates producer-consumer-intermediate.lisp
     which needs to be passed through expr-dsl to resolve expressions
     which results in final producer-consumer.lisp |#
 (producer-consumer::generate-intermediate)
#+end_src

* development
#+name: dsl
#+begin_src lisp :results output
 (uiop:run-program "rm -rf ~/.cache/common-lisp ;
 rm -rf ~/quicklisp/local-projects/*.fasl ;
 rm -rf ~/quicklisp/local/projects/*~")
 (ql:quickload :producer-consumer)
#+end_src

#+name: dsl
#+begin_src lisp :results output
  (load (producer-consumer::path "generate.lisp"))
#+end_src
#+name: dsl
#+begin_src lisp :results output
  (producer-consumer::generate)
#+end_src

* all packages (dev)
#+name: dsl
#+begin_src lisp :results output
(uiop:run-program "rm -rf ~/.cache/common-lisp ;
  rm -rf ~/quicklisp/local-projects/*/*.fasl ;
  rm -rf ~/quicklisp/local/projects/*/*~")
(ql:quickload :producer-consumer)
#+end_src

* all (dev)
#+name: dsl
#+begin_src lisp :results output
(ql:quickload :parsing-assembler)

#| stack-dsl |#
(ql:quickload :stack-dsl/generate)
(stack-dsl::generate)

#| sm-dsl code generation |#
(ql:quickload :sm-dsl)
(load (sm-dsl::path "generate-stacks.lisp"))
(sm-dsl::generate-stacks)
(ql:quickload :sm-dsl/generate)
(sm-dsl::generate "SM-DSL")

#| sm-dsl |#
(ql:quickload :sm-dsl)
(load (sm-dsl::path "stacks.lisp"))
(load (sm-dsl::path "classes.lisp"))
(load (sm-dsl::path "macros.lisp"))
(load (sm-dsl::path "sm-dsl.lisp"))
(load (sm-dsl::path "mechanisms.lisp"))
(load (sm-dsl::path "transpile.lisp"))

#| producer-consumer |#
(ql:quickload :producer-consumer)
(load (producer-consumer::path "generate.lisp"))
#+end_src

#+name: dsl
#+begin_src lisp :results output
 (producer-consumer::generate)
#+end_src



#+RESULTS: dsl

