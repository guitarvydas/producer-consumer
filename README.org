* intro
  Producer/Consumer written in statemachine DSL
  transpiles to running code
* build
#+name: transpiler
#+begin_src lisp
  #| use the RP Assembler to create a state machine transpiler sm.lisp program |#
  (ql:quickload :statemachine-transpiler) #| needed for package and for create-sm-lisp |#
#+end_src

#+name: transpiler
#+begin_src lisp
  (statemachine-transpiler::create-sm-lisp)  #| creates sm.lisp |#
  (load (asdf:system-relative-pathname :statemachine-transpiler "sm.lisp"))
  "created and loaded sm.lisp - ready to use statemachine DSL"
#+end_src

#+name: transpiler
#+begin_src lisp
  (ql:quickload :producer-consumer)
#+end_src

#+name: transpiler
#+begin_src lisp
  (producer-consumer:create-producer-consumer)
#+end_src

#+name: transpiler
#+begin_src lisp
  (producer-consumer:create-producer-consumer)
  (load (asdf:system-relative-pathname :producer-consumer "producer-consumer"))
  "created and load producer-consumer.lisp"
#+end_src

#+name: transpiler
#+begin_src lisp
  ;; run the resulting program
  (ql:quickload :producer-consumer/run)
  (producer-consumer:run)
#+end_src

#+RESULTS: transpiler
: #S(REPHRASE:TOKEN :KIND :EOF :TEXT "generated eof" :POSITION 0 :LINE 0)
